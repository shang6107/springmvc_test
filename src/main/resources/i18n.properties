NotEmpty.employee.lastName=lastName\u4e0d\u80fd\u4e3a\u7a7a
#Length.employee.lastName=lastName\u7684\u957f\u5ea6\u5fc5\u987b\u57283\u548c6\u4e4b\u95f4
Email.employee.email=email\u5730\u5740\u4e0d\u5408\u6cd5
Past.employee.birth=\u5fc5\u987b\u662f\u4e00\u4e2a\u8fc7\u53bb\u7684\u65f6\u95f4
typeMismatch.employee.birth=\u4e0d\u662f\u4e00\u4e2a\u6709\u6548\u7684\u65e5\u671f
lastName.length=\u540d\u5b57\u7684\u957f\u5ea6\u5fc5\u987b\u5728{min}\u548c{max}\u4e4b\u95f4
ScriptAssert.employee.lastName=\u540d\u5b57\u5fc5\u987b\u5c0f\u5199


## @RequestParam() 注解中有一个required属性，默认为true， 当参数不存在是会抛出异常
## 这时可以使用 required 作为前缀定制错误消息
## methodInvocation前缀可以处理 目标方法出错
## typeMismatch 可以定制数据类型不匹配的错误消息
## 错误消息定制的格式为 ： Annotation.modelAttribute.field=****



#not_equal=\u4e24\u6b21\u8f93\u5165\u4e0d\u4e00\u81f4
## 当需要验证两次密码输入是否相同时，可以编写如下代码：
#   if(password1.equals(employee.getPassword())){
#      result.rejectValue("password","not_equal");
#   }
#   当调用了这个方法之后，（result.getErrorCount() > 0 ）== true
#   result.rejectValue("password","not_equal"); 该方法作用：人为添加错误消息
#   第一个参数为 发生验证错误的属性， 第二个参数为国际化资源文件中的key


## 自定义验证规则 ##
#@ScriptAssert(
#           lang="javascript",
#           script="com.springmvc_test.validation.Check.checkParam(_this.lastName)",
#           reportOn = "lastName"
# )
#   lang属性：固定写法 "javascript"
#   script属性：验证方法的全路径，静态的，boolean返回值
#   reportOn属性：作用在哪个属性上


#@GroupSequence({First.class,Second.class,Employee.class})
#
#   顺序短路验证  @GroupSequence 会有短路效果
